#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'httparty'
require 'rainbow'
require 'pivt'
include GLI

program_desc 'A Pivotal Tracker CLI for getting shit done'
version Pivt::VERSION

config_file File.join(ENV['HOME'],'.pivt.rc.yaml')

desc 'Username'
flag [:u,:username]

desc 'Password'
flag [:p,:password]

desc 'Token'
flag [:token, :t]

desc 'Name'
flag [:name, :n]

desc 'Project ID'
flag :project

desc 'Show all tasks'
switch [:all, :a]

pre do |global,command,options,args|
  Pivt::Client.config({:username => global[:u], :password => global[:p], :project_id => global[:project], :name => global[:name]})
  true
end

desc 'List Pivotal tasks'
long_desc """
Lists Pivotal tasks for the current project.  By default it lists
your current and scheduled tasks only.  A filter can be passed as 
an argument to return different sets of tasks.
"""
command [:list, :l, :ls] do |c|
  c.action do |global_options,options,args|
    if args[0].nil?
      Pivt::Tasks.all.each do |task|
        puts task.format unless task.current_state == 'unscheduled'
      end
    else
      puts Pivt::Tasks.find(args[0]).format
    end
  end
end

command [:new, :n] do |c|

  c.desc 'description'
  c.flag [:description, :d]

  c.desc 'estimate'
  c.flag [:estimate, :e]

  c.desc 'task type'
  c.flag [:type, :t]

  c.desc 'position'
  c.flag [:position, :p]

  c.desc 'open task'
  c.switch [:open, :o, :start, :s]

  c.action do |global_options,options,args|
    Pivt::Tasks.create({:name => args[0]}.merge(options))
  end
end

command [:open, :o, :start] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.start
  end
end

command [:unopen, :u, :unstart] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.unstart
  end
end

command [:close, :c, :finish] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.finish
  end
end

command [:ship, :s, :deliver] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.deliver
  end
end

command [:accept, :a] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.accept
  end
end

command [:reject, :r] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.reject
  end
end

command [:estimate, :e] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.estimate(args[1])
  end
end

command [:push] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.push
  end
end

command [:pop] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.pop
  end
end

command [:move, :m] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.move args[1]
  end
end

command [:delete, :remove] do |c|
  c.action do |global_options,options,args|
    task = Pivt::Tasks.find(args[0])
    task.delete
  end
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
